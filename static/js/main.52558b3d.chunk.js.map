{"version":3,"sources":["components/groupScores/groupScores.tsx","components/game/songGame.tsx","components/words/words.tsx","components/groupName/form.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GroupScores","round","inputs","num","arr","i","push","fillArr","console","log","className","map","input","scope","groupName","score","id","SongGame","timerValue","useState","timer","setTimer","word","setWord","answered","setAnswered","setScore","endGame","setEndGame","nextGroup","setNextGroup","groupScore","setGroupScore","wordsArr","words","split","WordsToArr","useEffect","Math","floor","random","length","chooseRandomWord","countDown","setTimeout","clearTimeout","onClick","Form","setInputs","second","setSecond","rounds","setRounds","path","exact","onSubmit","e","preventDefault","index","htmlFor","placeholder","value","onChange","inputValue","target","type","removeField","splice","minusInputField","times","idx","to","parseInt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52558b3d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\ninterface inputs {\r\n  groupName: string;\r\n  id: number;\r\n  score: number;\r\n}\r\n\r\ninterface Props {\r\n  round: number;\r\n  inputs: inputs[];\r\n}\r\n\r\nconst GroupScores: React.FC<Props> = ({ round, inputs }): JSX.Element => {\r\n  const arr = fillArr(round);\r\n  console.log(inputs);\r\n  return (\r\n    <div>\r\n      <div className=\"table w-50 m-auto\">\r\n        <table className=\"table table-dark\">\r\n          <tbody>\r\n            {inputs.map((input) => {\r\n              return (\r\n                <tr key={input.id}>\r\n                  <th scope=\"row\">{input.groupName}</th>\r\n                  <td>{inputs[0].score}</td>\r\n                  <td>-</td>\r\n                  <td>-</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nfunction fillArr(num: number): number[] {\r\n  let arr = [];\r\n\r\n  for (let i = 1; i <= num; i++) {\r\n    arr.push(i);\r\n  }\r\n  return arr;\r\n}\r\nexport default GroupScores;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { words } from \"../words/words\";\r\nimport \"./style.css\";\r\nimport GroupScores from \"../groupScores/groupScores\";\r\ninterface inputs {\r\n  groupName: string;\r\n  id: undefined | number;\r\n  scored?: number;\r\n}\r\ninterface Props {\r\n  timerValue: number;\r\n  inputs: inputs[];\r\n  round: number;\r\n}\r\nconst SongGame: React.FC<Props> = ({\r\n  timerValue,\r\n  inputs,\r\n  round,\r\n}): JSX.Element => {\r\n  const [timer, setTimer] = useState<any>(5);\r\n  const [word, setWord] = useState<string>(\"\");\r\n  const [answered, setAnswered] = useState<boolean>(false);\r\n  const [score, setScore] = useState<number>(0);\r\n  const [endGame, setEndGame] = useState<boolean>(false);\r\n  const [nextGroup, setNextGroup] = useState<number>(0);\r\n  const [groupScore, setGroupScore] = useState<any[]>([]);\r\n  const wordsArr = WordsToArr(words);\r\n  useEffect(() => {\r\n    setWord(chooseRandomWord(wordsArr));\r\n    setGroupScore([\r\n      {\r\n        ...inputs[nextGroup],\r\n        score: score + 1,\r\n      },\r\n    ]);\r\n  }, [answered]);\r\n  useEffect(() => {\r\n    const countDown = setTimeout(() => {\r\n      setTimer(timer - 1);\r\n    }, 1000);\r\n    if (timer === 0) {\r\n      clearTimeout(countDown);\r\n      setEndGame(true);\r\n      setNextGroup(nextGroup + 1);\r\n    }\r\n    return () => clearTimeout(countDown);\r\n  }, [timer]);\r\n  const handleAnswered = () => {\r\n    setScore(score - 1);\r\n    setAnswered(true);\r\n    if (answered === true) {\r\n      setAnswered(false);\r\n    }\r\n  };\r\n  const handleCorrectAnswer = () => {\r\n    setScore(score + 1);\r\n    setAnswered(true);\r\n    if (answered === true) {\r\n      setAnswered(false);\r\n    }\r\n  };\r\n  if (endGame === false) {\r\n    return (\r\n      <div>\r\n        <div className=\"d-flex justify-content-center align-items-center\">\r\n          <div\r\n            onClick={handleAnswered}\r\n            className=\"w-50 bg-danger song-game text-center\"\r\n          >\r\n            <h1>{score}</h1>\r\n          </div>\r\n          <div className=\"w-25 text-center\">\r\n            <h1>{timer}</h1>\r\n            <h1>{word}</h1>\r\n          </div>\r\n          <div\r\n            onClick={handleCorrectAnswer}\r\n            className=\"w-50 bg-success song-game text-center\"\r\n          >\r\n            <h1>{score}</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <GroupScores round={round} inputs={groupScore} />;\r\n  }\r\n};\r\nfunction WordsToArr(words: string): string[] {\r\n  const Words = words.split(\" \");\r\n  const arrWords = Words;\r\n\r\n  return arrWords;\r\n}\r\nfunction chooseRandomWord(arr: string[]): string {\r\n  const id = Math.floor(Math.random() * arr.length);\r\n  return arr[id];\r\n}\r\n\r\nexport default SongGame;\r\n","export const words = `PLEASE LIKE ROLL MAKE\r\nHATE DANCE CANDLE HEART\r\nDOG HOME SLOW FAST\r\nSLOWLY MEET BUILD SMILE\r\nSHAKE TWIST RUN CAR\r\nFAST BOOM CHANDELIER CLOUDS\r\nSISTER MAMA MOTHER HEAVEN\r\nSHOW BREATHE NIGHT SWEET\r\nONE ONLY BACK BAD\r\nGOOD DOWN SMALL BIG\r\nPHONE BEAUTY BEAUTIFUL LATE\r\nGO COME STAY FOREVER\r\nRAINBOW SOMEWHERE DANGEROUS QUEEN\r\nHONEY BILLS CRAZY DEEP\r\nAGAIN BROKEN LADY LUCK\r\nLOST FOUND ALL BURN\r\nSOMEBODY SORRY PRETTY WAR\r\nSONG ASSOCIATION WORD GAME\r\nWORD SONG RING SUGAR\r\nCARE HAVE NEED GOD\r\nTOGETHER IMAGINE FREE FUN\r\nNEED COLOUR DEAR ROSES\r\nEAT LOVE PRAY FOOD\r\nDJ EARTH LIFE UNIVERSE\r\nWORLD EIGHTEEN SIXTEEN STARS\r\nLOCK KISS KEY JEANS\r\nFACE MICHELLE CHILD WORRY\r\nSKY DRESS FRIEND FIRE\r\nWALK MEMORY TREE YOU\r\nME I PHOTOGRAPH HOUSE\r\nPICTURE DOOR TREASURE SEE\r\nJELLY SMELL BABY SMACK\r\nWINDOW THANK TOWN VILLAGE\r\nUP HOLD HAIR NAILS\r\nHELL SHOES LIGHT FLOOR\r\nSONG ASSOCIATION WORD GAME\r\nEYE WORK SKIN SHAPE\r\nBROWN NAME HOPE JOY\r\nDEATH SHIRT DREAM PARTY\r\nRAINBOW WET WEEKEND MONDAY\r\nFRIDAY WEDDING MARRY PEOPLE\r\nSHINY SAD HAPPY MAN\r\nWOMAN GIRL BOY ROCK\r\nBRIGHT BLUE RED BLACK\r\nCALIFORNIA MONSTER PLAY SUMMER\r\nGROW SNOW CRY FIELD\r\nCASTLE PRINCE MARS MOON`;\r\n","import React, { useState } from \"react\";\r\nimport { AiFillPlusCircle } from \"react-icons/ai\";\r\nimport { AiFillMinusCircle } from \"react-icons/ai\";\r\nimport { AiFillPlayCircle } from \"react-icons/ai\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport SongGame from \"../game/songGame\";\r\nimport \"./style.css\";\r\n\r\ninterface inputs {\r\n  groupName: string;\r\n  id: undefined | number;\r\n}\r\n\r\nconst Form: React.FC = (): JSX.Element => {\r\n  const [inputs, setInputs] = useState<inputs[]>([\r\n    {\r\n      groupName: \"\",\r\n      id: 0,\r\n    },\r\n  ]);\r\n  const [second, setSecond] = useState<string>(\"15\");\r\n  const [rounds, setRounds] = useState<number>(1);\r\n  const time: number[] = [15, 30, 45, 60];\r\n  const round: number[] = [1, 2, 3, 4];\r\n  const plusInputField = () => {\r\n    setInputs([\r\n      ...inputs,\r\n      {\r\n        groupName: \"\",\r\n        id: inputs.length,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleSubmit = (e: any): void => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const minusInputField = (index: number): void => {\r\n    let removeField = [...inputs];\r\n    if (index > 0) {\r\n      removeField.splice(index, 1);\r\n      setInputs(removeField);\r\n    } else {\r\n      setInputs(removeField);\r\n    }\r\n  };\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <div>\r\n            <div className=\"w-100 m-auto\">\r\n              <div className=\"text-center\">\r\n                <h1>choose how many group do you want and name them</h1>\r\n              </div>\r\n              <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group w-75 text-center m-auto\">\r\n                  {inputs.map((input: any, index: number) => {\r\n                    return (\r\n                      <div key={index} className=\"bg-info mt-3\">\r\n                        <label htmlFor=\"groupName\">{index + 1} group</label>\r\n                        <input\r\n                          placeholder=\"enter your group name here\"\r\n                          className=\"form-control w-50 m-auto\"\r\n                          key={index}\r\n                          id=\"groupName\"\r\n                          value={input.groupName}\r\n                          onChange={(e: any) => {\r\n                            const inputValue = [...inputs];\r\n                            inputValue[index].groupName = e.target.value;\r\n                            setInputs(inputValue);\r\n                          }}\r\n                        />\r\n                        <button\r\n                          className=\"btn btn-success m-2\"\r\n                          onClick={() => plusInputField()}\r\n                          type=\"submit\"\r\n                        >\r\n                          add group <AiFillPlusCircle />\r\n                        </button>\r\n                        <button\r\n                          className=\"btn btn-danger\"\r\n                          type=\"button\"\r\n                          onClick={() => minusInputField(index)}\r\n                        >\r\n                          remove group <AiFillMinusCircle />\r\n                        </button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                  <label className=\"d-block\" htmlFor=\"timer\">\r\n                    enter time in seconds\r\n                  </label>\r\n                  <select\r\n                    id=\"timer\"\r\n                    onChange={(e) => setSecond(e.target.value)}\r\n                    className=\"form-control w-25 m-auto\"\r\n                  >\r\n                    {time.map(\r\n                      (times: number, idx: number): JSX.Element => {\r\n                        return (\r\n                          <option key={idx} value={times}>\r\n                            {times}\r\n                          </option>\r\n                        );\r\n                      }\r\n                    )}\r\n                  </select>\r\n                  <label htmlFor=\"round\">choose amount of rounds</label>\r\n                  <select\r\n                    id=\"round\"\r\n                    onChange={(e: any) => setRounds(e.target.value)}\r\n                    className=\"form-control w-25 m-auto\"\r\n                  >\r\n                    {round.map((round, idx) => {\r\n                      return (\r\n                        <option key={idx} value={round}>\r\n                          {round}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </select>\r\n                </div>\r\n              </form>\r\n              <div className=\"text-center\">\r\n                <Link to=\"/play\">\r\n                  <button className=\"btn btn-success m-2\">\r\n                    play <AiFillPlayCircle />\r\n                  </button>\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/play\" exact>\r\n          <SongGame\r\n            timerValue={parseInt(second)}\r\n            inputs={inputs}\r\n            round={rounds}\r\n          />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/groupName/form\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}